generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Users {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  password String
  tokens   Tokens[]  
  credentials  Credentials[]
  notes  Notes[]
  cards  Cards[]
  wifiPasswords  WifiPasswords[]
  softwareLicense SoftwareLicenses[]
  @@map("users")
}
model Tokens{
  id    Int    @id @default(autoincrement())
  user    Users @relation(fields:[userId], references: [id])
  userId Int
  token String
  @@map("tokens")
}
model Credentials{
  id    Int    @id @default(autoincrement())
  title String
  name String
  url String
  password String
  user    Users @relation(fields:[userId], references: [id])
  userId Int
  @@unique([title, userId])
  @@map("credentials")
}
model Notes{
  id    Int    @id @default(autoincrement())
  title String
  description String
  user    Users @relation(fields:[userId], references: [id])
  userId Int
  @@unique([title, userId])
  @@map("notes")
}

model Cards{
  id    Int    @id @default(autoincrement())
  title String
  name String
  number String
  ccv String
  expirationDate DateTime
  password String
  isVirtual Boolean
  type CardType
  user    Users @relation(fields:[userId], references: [id])
  userId Int
  @@unique([title, userId])
  @@map("cards")
}
enum CardType {
  CREDIT
  DEBIT
  BOTH
}
model WifiPasswords{
  id    Int    @id @default(autoincrement())
  title String
  name String
  password String
  user    Users @relation(fields:[userId], references: [id])
  userId Int
  @@unique([title, userId])
  @@map("wifi_passwords")
}
model SoftwareLicenses{
  id    Int    @id @default(autoincrement())
  title String
  name String
  version String
  key String
  user    Users @relation(fields:[userId], references: [id])
  userId Int
  @@unique([title, userId])

  @@map("software_licenses")
}
